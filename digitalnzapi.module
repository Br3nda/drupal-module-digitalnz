<?php
// $Id: digitalnzapi.module,v 1.1 2010/02/07 03:48:43 jonathanhunt Exp $
/**
 * @file
 * Wrapper for the DigitalNZ API http://digitalnz.org
 * Some aspects based on apachesolr module.
 * This module was produced at the DigitalNZ-sponsored Christchurch Hackfest, 12 September 2009.
 *
 * @author digitalnzapi.module@huntdesign.co.nz
 *
 * Hooks:
 * hook_digitalnzapi_search($search_text). Return override for search text.
 *
 * @todo:
 * - Keep key confidential, password screening? encryption?
 * - Add support for other API calls: metadata, digitalnz contributors, custom search
 * - Support faceted search.
 */
define('DIGITALNZ_SETTINGS_PATH', 'admin/settings/digitalnz-api');
define('DIGITALNZ_SETTINGS_MENU_PATH', 'Administer > Site configuration > DigitalNZ API');
define('DIGITALNZ_API_URL', 'http://api.digitalnz.org/records/v1');
define('DIGITALNZ_API_KEY_URL', 'http://digitalnz.org/developer');
define('DIGITALNZ_SEARCH_URL', 'http://search.digitalnz.org/en/search');

/**
 * Define callback for settings.
 * Implementation of hook_menu().
 */
function digitalnzapi_menu() {

  $items[DIGITALNZ_SETTINGS_PATH] = array(
    'title' => t('DigitalNZ API'),
    'description' => t('Configure API Key, etc.'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('digitalnzapi_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'digitalnzapi_admin.inc',
  );
  return $items;
}

/**
 * Valid response formats are json, rss, xml.
 */
function digitalnzapi_do_search($search_text, $start = 0, $rows = 10, $sort = NULL, $direction = 'asc', $response_format = 'xml') {
  $endpoint = variable_get('digitalnz_api_url', DIGITALNZ_API_URL);
  $key = variable_get('digitalnz_api_key', '');
  if (empty($key)) {
    drupal_set_message(t('DigitalNZ API needs an API key. Settings are available at <strong class="drupal_link_admin_settings"><a href="@settings-path">@menu-path</a></strong>.', array(
      '@menu-path' => DIGITALNZ_SETTINGS_MENU_PATH,
      '@settings-path' => url(DIGITALNZ_SETTINGS_PATH),
    )), 'error');
    return;
  }

  // Allow other modules to override our search text (e.g. to restrict by field).
  $search_text = digitalnzapi_invoke_digitalnzapi_search($search_text);

  $url = $endpoint .'.'. $response_format .'?api_key='. $key .'&start='. $start .'&num_results='. $rows .'&search_text='. urlencode($search_text);

  if (!empty($sort)) {
    $url .= '&sort='. $sort;
    $url .= '&direction='. $direction;
  }

  $response = drupal_http_request($url);

  if ($response->code == 200) {
    $data = $response->data;

    // Cache response and set semaphore for use by blocks.
    digitalnz_static_response_cache($data);
    digitalnz_has_searched(TRUE);

    //$results = $response_format == 'simplexml'? new SimpleXMLElement($data) : $data;

    return $data;
  }
  else {
    // Deal with HTTP errors
    switch ($response->code) {
      case 401:
        drupal_set_message(t('DigitalNZ returned @error. Check your settings at <strong class="drupal_link_admin_settings"><a href="@settings-path">@menu-path</a></strong></strong>.', array(
          '@error' => 'HTTP '. $response->code .': '. $response->data,
          '@menu-path' => DIGITALNZ_SETTINGS_MENU_PATH,
          '@settings-path' => url(DIGITALNZ_SETTINGS_PATH),
        )), 'error');
        break;

      default:
        drupal_set_message(t('DigitalNZ returned @error', array(
          '@error' => 'HTTP '. $response->code .': '. strip_tags($response->data),
        )), 'error');
        break;
    }
  }
}

/**
 * Pass in XML resulting from DigitalNZ search, returns results array.
 * URLs in result['extra'] are returned sanitised.
 */
function digitalnzapi_results($xml) {
  $results = array();
  if (!is_object($xml)) {
    $xml = new SimpleXMLElement($xml);
  }

  if ($xml->{'result-count'} > 0) {
    foreach ($xml->results->result as $result) {
      // Need to convert date from 2009-08-12T02:10:49.344Z to timestamp
      $raw_date = (string)$result->date;
      $date = $raw_date ? digitalnzapi_convert_date($raw_date) : '';

      $display_url = $result->{'display-url'};
      $metadata_url = $result->{'metadata-url'};

      $extra = array(
        'provider' => check_plain($result->{'content-provider'}),
        'id' => 'id:'. check_plain($result->id),
        'thumbnail_url' => check_url($result->{'thumbnail-url'}),
     //   'raw_date' => $raw_date,
      );

      // Show thumbnail. @todo: make a setting to toggle display.
      if (!empty($result->{'thumbnail-url'})) {
        $thumbnail = '<br/><a href="'. check_url($result->{'source-url'}) .'"><img src="'. check_url($result->{'thumbnail-url'}) .'" alt="'. check_plain($result->title) .'"/></a>';
      }
      else {
        $thumbnail = '';
      }

      $results[] = array(
        'link' => check_url($result->{'source-url'}),
        'type' => check_plain($result->category),
        'title' => check_plain($result->title),
       // 'user' => theme('username', $node),
        'date' => check_plain($date),
        'node' => (array)$result, // Cast to array instead of SimpleXML.
        'extra' => $extra,
      //  'score' => $item->score / $total,
        'snippet' => check_markup($result->description) . $thumbnail,
      );
    }
  }

  return $results;
}

/**
 * Allow modules to alter search text by reference.
 */
function digitalnzapi_invoke_digitalnzapi_search(&$search_text) {
  foreach (module_implements('digitalnzapi_search') as $name) {
    $function = $name .'_digitalnzapi_search';
    $result = $function($search_text);
  }
  return $search_text;
}

/**
 * Helper function to return timestamp from 2009-08-12T02:10:49.344Z
 * Could be replaced > PHP5.3
 *
 * @param
 *   $date Date string in XML Schema? format.
 *
 * @return
 *   Timestamp
 */
function digitalnzapi_convert_date($date) {
  $year = substr($date, 0, 4);
  $month = substr($date, 5, 2);
  $day = substr($date, 8, 2);

  $hour = substr($date, 11, 2);
  $minute = substr($date, 14, 2);
  $second = substr($date, 17, 2);

  return mktime($hour, $minute, $second, $month, $day, $year);
}

/**
 * Semaphore that indicates whether a search has been done. Blocks use this
 * later to decide whether they should load or not.
 *
 * @param $searched
 *   A boolean indicating whether a search has been executed.
 *
 * @return
 *   TRUE if a search has been executed.
 *   FALSE otherwise.
 */
function digitalnz_has_searched($searched = NULL) {
  static $_searched = FALSE;
  if (is_bool($searched)) {
    $_searched = $searched;
  }
  return $_searched;
}

/**
 * It is important to hold on to the search response object for the duration of the
 * page request so that we can use it for things like building facet blocks.
 */
function digitalnz_static_response_cache($response = NULL) {
  static $_response;

  if (!empty($response)) {
    $_response = $response;
  }
  return $_response;
}